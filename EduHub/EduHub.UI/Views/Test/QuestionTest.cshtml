@model EduHub.Application.DTOs.Test.PassingTestDTO;
@using EduHub.Domain.Enums;

<div class="d-flex flex-column flex-md-row flex-lg-row align-items-center gap-2 m-2 ">
    @{
        int temp = 0;
        int indexCurentQuestio = 0;
        var endTime = ((DateTime)ViewBag.TimeExpire);
        var timeRemaining = (int)TimeSpan.FromTicks(endTime.Ticks - DateTime.UtcNow.Ticks).TotalSeconds;
    }

    <div class="side-test">
        <h4>Test: @Model.Name</h4>
        <div class="timer">
             <div>Time remaining :  <span id="minRemaining"></span>:<span id="secRemaining"></span> </div>

        </div>
        <div class="nav-questions">
           
        @for(var i = 0; i < Model?.Questions?.Count(); i++)
        {

            if(Model.Questions.ToArray()[i].Id == Model.CurrentQuestion?.Id)
            {
                 <a class="active-link-question">
                   @(temp =i + 1)
                   @{indexCurentQuestio = i;}
                </a>
            }
            else
            {
                <button class="side-question-nav" 
                onclick="SentQuestionTest('@Model.Questions.ToArray()[i].Id', '@Model?.CurrentQuestion?.TestId', '@Model?.CurrentQuestion?.Id')" >
                @(temp =i + 1)
                </button>

               
            }
        }
        </div>
    </div>
    <div class="content-question">
        <h3>@Model?.CurrentQuestion?.QuestionContent</h3>
        <h6>Points: @Model?.CurrentQuestion?.Points</h6>
        <div class="answers">
            @if (Model?.CurrentQuestion?.Type == QuestionType.OneAnswer)
            {
                <h3>Chose one Answer:</h3>
                <div class="oneAnswer">
                @foreach(var answer in Model?.CurrentQuestion?.Answers)
                {
                    <div class="one">
                        @if (Model.AnswerOne != null && answer.Content == Model.AnswerOne)
                        {
                            <input type="radio" id="@answer.Content" name="one" value="@answer.Content" checked>
                            <label for="@answer.Content">@answer.Content</label>
                        }
                        else
                        {
                             <input type="radio" id="@answer.Content" name="one" value="@answer.Content">
                             <label for="@answer.Content">@answer.Content</label>
                        }      
                    </div>
                }
                </div>
            }
            @if (Model?.CurrentQuestion?.Type == QuestionType.MultiAnswers)
            {
                <h3>Chose multiple Answers:</h3>
                <div class="multipleAnswers">
                @foreach(var answer in Model?.CurrentQuestion?.Answers)
                {
                   <div class="multi">
                        @if (Model.AnswerMulti != null && Model.AnswerMulti.Contains(answer.Content))
                        {
                            <input type="checkbox" id="@answer.Content" name="@answer.Content" value="@answer.Content" checked>
                            <label for="@answer.Content">@answer.Content</label>
                        }
                        else
                        {
                             <input type="checkbox" id="@answer.Content" name="@answer.Content" value="@answer.Content">
                             <label for="@answer.Content">@answer.Content</label>
                        }      
                        
                   </div>
                }
                </div>
            }
            @if (Model?.CurrentQuestion?.Type == QuestionType.WriteAnswer)
            {
                <h3>Your Answer:</h3>
                @if (Model.AnswerOne != null)
                {
                    <input id="answerWritten" value="@Model.AnswerOne" class="rounded width-30vw">
                }
                else
                {
                    <input id="answerWritten" class="rounded width-30vw">
                }
            }
        </div>
        <div class="test-buttons d-flex gap-4">
            @if(Model.Questions.ToArray()[0].Id != Model.CurrentQuestion?.Id)
            {
               <button class="btn btn-primary" onclick="SentQuestionTest('@Model.Questions.ToArray()[indexCurentQuestio - 1].Id', '@Model?.CurrentQuestion?.TestId', '@Model?.CurrentQuestion?.Id')" >Back</button>
            }
            @if(Model.Questions.ToArray()[Model.Questions.ToArray().Count()-1].Id != Model.CurrentQuestion?.Id)
            {
                               
                <button class="btn btn-primary" onclick="SentQuestionTest('@Model.Questions.ToArray()[indexCurentQuestio + 1].Id', '@Model?.CurrentQuestion?.TestId', '@Model?.CurrentQuestion?.Id')" >Next</button>

            }
            @if(Model.Questions.ToArray()[Model.Questions.ToArray().Count()-1].Id == Model.CurrentQuestion?.Id)
            {
               <button class="btn btn-success" onclick="FinishTest('@Model?.CurrentQuestion?.TestId', '@Model?.CurrentQuestion?.Id')" >Finish</button>

            }

        </div>
    </div>
</div>

<script>
     var remSeconds = @timeRemaining;
    
    var secondsCounter = remSeconds % 60;
   
    function formatNumber(number){
        if (number < 10) return '0' + number;
        else return '' + number;
    }

   function startTick(){
       document.getElementById('secRemaining').innerHTML = formatNumber(secondsCounter);
       document.getElementById('minRemaining').innerHTML = formatNumber(parseInt(remSeconds / 60));
       
       
       var _tick = setInterval(function() {
           if (remSeconds > 0) {

               remSeconds = remSeconds - 1;
               secondsCounter = secondsCounter - 1;
               document.getElementById('secRemaining').innerHTML = formatNumber(secondsCounter);
               document.getElementById('minRemaining').innerHTML = formatNumber(parseInt(remSeconds / 60));

               if (secondsCounter == 0) {
                   secondsCounter = 60;
               }
           }else{
               this.FinishTest('@Model?.CurrentQuestion?.TestId', '@Model?.CurrentQuestion?.Id')
                clearInterval(_tick)
           }

           }, 1000);
       
   }
   startTick()

    function SentQuestionTest(questionId, testId, currentQuestionId){
        var queryParams = "?questionId=" + questionId;
        queryParams += "&testId=" + testId;
        queryParams += "&secondsRemains=" + remSeconds;
        queryParams += "&questionAnswerId=" + currentQuestionId;
            let  answerOneId = document.querySelector('input[type="radio"]:checked')?.value?.toString();
            if(answerOneId){
                 queryParams += "&answerOne=" + answerOneId;
            }
            
            let answerStr = document.getElementById("answerWritten")?.value;
            if(answerStr){
                queryParams += "&answer=" + answerStr;
            }

            let answerMultiCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            if(answerMultiCheckboxes?.length > 0){
                  let answerMultiIds = [];
    
                  answerMultiCheckboxes.forEach(function(checkedBox) {
                        answerMultiIds.push(checkedBox.value);
                  });
                  queryParams += "&answersMulti=" + answerMultiIds;
            }
        window.location.href = "/Test/QuestionTest" + queryParams;

    }

    function FinishTest(testId, currentQuestionId){
        let queryParams = "?testId=" + testId;
        queryParams += "&questionAnswerId=" + currentQuestionId;
            
            let  answerOneId = document.querySelector('input[type="radio"]:checked')?.value?.toString();
            if(answerOneId){
                 queryParams += "&answerOne=" + answerOneId;
            }
            
            let answerStr = document.getElementById("answerWritten")?.value;
            if(answerStr){
                queryParams += "&answer=" + answerStr;
            }

            let answerMultiCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            if(answerMultiCheckboxes?.length > 0){
                  let answerMultiIds = [];
    
                  answerMultiCheckboxes.forEach(function(checkedBox) {
                        answerMultiIds.push(checkedBox.value);
                  });
                  queryParams += "&answersMulti=" + answerMultiIds;
            }
                  
        window.location.href = "/Test/FinishTest" + queryParams;

    }
</script>